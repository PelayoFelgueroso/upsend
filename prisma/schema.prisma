// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  name          String
  email         String   @unique
  emailVerified Boolean  @default(false)
  country       String
  password      String
  role          Role     @default(user)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())

  // Relations
  usage          UserUsage?
  refreshTokens  RefreshToken[]
  emailTemplates EmailTemplate[]
  emailLogs      EmailLog[]
  apiKeys        ApiKey[]
  SmtpConfig     SmtpConfig?

  @@map("users")
}

model RefreshToken {
  id        String    @id @default(cuid())
  token     String    @unique
  userId    String
  used      Boolean   @default(false)
  usedAt    DateTime?
  expiresAt DateTime
  createdAt DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model EmailTemplate {
  id        String         @id @default(cuid())
  name      String
  subject   String
  content   String
  type      TemplateType   @default(TRANSACTIONAL)
  status    TemplateStatus @default(ACTIVE)
  userId    String
  usage     Int            @default(0)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailLogs EmailLog[]

  @@map("email_templates")
}

model EmailLog {
  id         String      @id @default(cuid())
  templateId String?
  userId     String
  recipient  String
  subject    String
  status     EmailStatus @default(SENT)
  content    String
  error      String?
  sentAt     DateTime    @default(now())

  user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  template EmailTemplate? @relation(fields: [templateId], references: [id], onDelete: SetNull)

  @@map("email_logs")
}

model ApiKey {
  id        String       @id @default(cuid())
  name      String
  key       String       @unique
  userId    String
  status    ApiKeyStatus @default(ACTIVE)
  lastUsed  DateTime?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  revokedAt DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_keys")
}

model UserUsage {
  id          String   @id @default(cuid())
  userId      String   @unique
  emailsSent  Int      @default(0)
  apiCalls    Int      @default(0)
  storageUsed BigInt   @default(0) // in bytes
  limits      Json     @default("{\"emailsPerMonth\": 1000, \"apiCallsPerMonth\": 5000, \"storageGB\": 1}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_usage")
}

model SmtpConfig {
  id           String   @id @default(cuid())
  userId       String   @unique
  host         String
  port         Int
  username     String
  password     String
  fromName     String
  fromEmail    String
  replyToEmail String?
  enableTls    Boolean  @default(true)
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("smtp_configs")
}

// Enums

enum Role {
  admin
  user
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELLED
  PAST_DUE
}

enum TemplateType {
  TRANSACTIONAL
  MARKETING
  NOTIFICATION
}

enum TemplateStatus {
  ACTIVE
  DRAFT
  ARCHIVED
}

enum EmailStatus {
  SENT
  DELIVERED
  OPENED
  CLICKED
  BOUNCED
  FAILED
}

enum ApiKeyStatus {
  ACTIVE
  INACTIVE
}
